{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthContext = createContext({});\nexport var AuthProvider = function AuthProvider(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAuthenticated = _useState2[0],\n      setIsAuthenticated = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentWorkspace = _useState6[0],\n      setCurrentWorkspace = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentNewWorkspace = _useState8[0],\n      setCurrentNewWorkspace = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      taskId = _useState10[0],\n      setTaskId = _useState10[1];\n\n  return _jsx(AuthContext.Provider, {\n    value: {\n      isAuthenticated: isAuthenticated,\n      user: user,\n      setUser: setUser,\n      setIsAuthenticated: setIsAuthenticated,\n      currentWorkspace: currentWorkspace,\n      setCurrentWorkspace: setCurrentWorkspace,\n      currentNewWorkspace: currentNewWorkspace,\n      setCurrentNewWorkspace: setCurrentNewWorkspace,\n      taskId: taskId,\n      setTaskId: setTaskId\n    },\n    children: props.children\n  });\n};","map":{"version":3,"names":["React","createContext","useCallback","useEffect","useState","AuthContext","AuthProvider","props","isAuthenticated","setIsAuthenticated","user","setUser","currentWorkspace","setCurrentWorkspace","currentNewWorkspace","setCurrentNewWorkspace","taskId","setTaskId","children"],"sources":["E:/react-native/task management app/Trello/src/Context/Auth.js"],"sourcesContent":["import React, {createContext, useCallback, useEffect, useState} from 'react';\r\n\r\nexport const AuthContext = createContext({});\r\n// import AsyncStorage from '@react-native-async-storage/async-storage';\r\n// import DeviceInfo from 'react-native-device-info';\r\n// \r\n// export var uniqueId = DeviceInfo.getUniqueId();\r\n\r\nexport const AuthProvider = props => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(true);\r\n  const [user ,setUser] = useState()\r\n  const [currentWorkspace , setCurrentWorkspace] = useState(\"\")\r\n  const [currentNewWorkspace , setCurrentNewWorkspace] = useState()\r\n  const [taskId , setTaskId] = useState()\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n    isAuthenticated,\r\n    user ,\r\n    setUser,\r\n    setIsAuthenticated,\r\n    currentWorkspace,\r\n    setCurrentWorkspace,\r\n    currentNewWorkspace,\r\n    setCurrentNewWorkspace,\r\n    taskId,\r\n    setTaskId\r\n      }}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,WAA9B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAqE,OAArE;;AAEA,OAAO,IAAMC,WAAW,GAAGJ,aAAa,CAAC,EAAD,CAAjC;AAMP,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;EACnC,gBAA8CH,QAAQ,CAAC,IAAD,CAAtD;EAAA;EAAA,IAAOI,eAAP;EAAA,IAAwBC,kBAAxB;;EACA,iBAAwBL,QAAQ,EAAhC;EAAA;EAAA,IAAOM,IAAP;EAAA,IAAaC,OAAb;;EACA,iBAAiDP,QAAQ,CAAC,EAAD,CAAzD;EAAA;EAAA,IAAOQ,gBAAP;EAAA,IAA0BC,mBAA1B;;EACA,iBAAuDT,QAAQ,EAA/D;EAAA;EAAA,IAAOU,mBAAP;EAAA,IAA6BC,sBAA7B;;EACA,iBAA6BX,QAAQ,EAArC;EAAA;EAAA,IAAOY,MAAP;EAAA,IAAgBC,SAAhB;;EACA,OACE,KAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MACTT,eAAe,EAAfA,eADS;MAETE,IAAI,EAAJA,IAFS;MAGTC,OAAO,EAAPA,OAHS;MAITF,kBAAkB,EAAlBA,kBAJS;MAKTG,gBAAgB,EAAhBA,gBALS;MAMTC,mBAAmB,EAAnBA,mBANS;MAOTC,mBAAmB,EAAnBA,mBAPS;MAQTC,sBAAsB,EAAtBA,sBARS;MASTC,MAAM,EAANA,MATS;MAUTC,SAAS,EAATA;IAVS,CADT;IAAA,UAaGV,KAAK,CAACW;EAbT,EADF;AAiBD,CAvBM"},"metadata":{},"sourceType":"module"}